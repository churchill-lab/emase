#!/usr/bin/env python
import getopt
import os
import string
import subprocess
import sys


help_message = """
Usage:
    create-hybrid -F <fasta_files> [ -s <hap_list> -o <out_file> --create-bowtie-index ]

Input:
    -F <fasta_files> : List of fasta files (comma delimited)
    -s <hap_list>    : Names of haplotypes to be used instead (comma delimited, in the order of genomes)
    -o <out_file>    : Output file name (default: './emase.pooled.targets.fa')

Parameters:
    --help, -h            : shows this help message
    --create-bowtie-index : builds bowtie1 index
"""


class Usage(Exception):
    def __init__(self, msg):
        self.msg = msg


def main(argv=None):
    if argv is None:
        argv = sys.argv
    try:
        try:
            opts, args = getopt.getopt(
                argv[1:], "hF:s:o:", ["help", "create-bowtie-index"]
            )
        except getopt.error as msg:
            raise Usage(msg)

        # Default values of vars
        fastalist = list()
        haplist = None
        num_haps = 0
        outfile = "./emase.pooled.targets.fa"
        build_bowtie_index = False

        # option processing (change this later with optparse)
        for option, value in opts:
            if option in ("-h", "--help"):
                raise Usage(help_message)
            if option == "-F":
                fastalist = value.split(",")
                num_haps = len(fastalist)
            if option == "-s":
                haplist = value.split(",")
            if option == "--create-bowtie-index":
                build_bowtie_index = True
            if option == "-o":
                outfile = value

        # Check if the required options are given
        if num_haps < 2:
            print("At least two fasta files should be given.", file=sys.stderr)
            return 2
        if haplist is None:
            haplist = list(string.ascii_uppercase[:num_haps])
            print(f"Default haplotype names will be used: {', '.join(haplist)}", file=sys.stderr)
        if len(haplist) != num_haps:
            print("The number of specified haplotypes is not matching to the number of fasta files.", file=sys.stderr)
            return 2

        #
        # Main body
        #

        outdir = os.path.dirname(outfile)
        if not os.path.exists(outdir):
            os.mkdir(outdir)

        #
        # Get pooled transcriptome
        outbase = os.path.splitext(outfile)[0]
        lenfile = f"{outbase}.info"
        seqout = open(outfile, "w")
        lenout = open(lenfile, "w")
        for hid in range(num_haps):
            fasta = fastalist[hid]
            # fastaname = os.path.splitext(os.path.basename(fasta))[0]
            hapname = haplist[hid]
            print(f"Adding suffix '_{hapname}' to the sequence ID's of {fasta}...", file=sys.stderr)
            fh = open(fasta)
            curline = fh.readline()  # The first fasta header
            curline = curline.rstrip().split()[0] + "_" + hapname
            seqout.write(f"{curline}\n")
            lenout.write(f"{curline[1:]}\t")
            seqlen = 0
            for curline in fh:
                if curline[0] == ">":
                    curline = f"{curline.rstrip().split()[0]}_{hapname}\n"
                    lenout.write(f"{seqlen}\n{curline[1:].rstrip()}\t")
                    seqlen = 0
                else:
                    seqlen += len(curline.rstrip())
                seqout.write(curline)
            fh.close()
            lenout.write(f"{seqlen}\n")
        seqout.close()
        lenout.close()

        #
        # Build bowtie index for the pooled transcriptome
        if build_bowtie_index:
            out_index = f"{outbase}.bowtie1"
            print("Building bowtie1 index...", file=sys.stderr)
            status = subprocess.call(
                f"bowtie-build {outfile} {out_index}",
                shell=True
            )

        #
        # End of main body
        #

    except Usage as err:
        print(sys.argv[0].split("/")[-1] + ": " + str(err.msg), file=sys.stderr)
        return 2


if __name__ == "__main__":
    sys.exit(main())
